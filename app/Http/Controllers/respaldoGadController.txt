<?php

namespace App\Http\Controllers;

use App\Models\Encuesta;
use Illuminate\Http\Request;

class GadController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
        $this->middleware('gad',['only'=>['index'] ]);
        
    }
    public function index()
    {
        return view('gad.home');
    }

    public function perfil(){
        
        return view('gad.configUser');
    }


    public function validacion()
    {
        return view('gad.validacion');
    }
    public function ponderacion()
    {
        // aqui voy a mostrar los resultados
        $recuperado4 = Encuesta::all($columns=['pregunta4']);
        $long = count($recuperado4) -1; //longuitud
        $arreglo = [];// este arreglo recupera como arreglo para acceder a los atributos o claves del arreglo
        for ($i=0; $i < count($recuperado4)-1; $i++) { 
            array_push($arreglo, json_decode(json_decode($recuperado4[$i])->pregunta4) );
            // array_push($arreglo, json_decode(json_decode($recuperado4[$i])->pregunta4, true) );
            // para tratarlo como arreglo segundo parametro true

        }
        
        dump($long);
        dump($arreglo);
        $aux = $arreglo[$long-1]; //ultimo registro
        $aux = $arreglo[0]; //ultimo registro

        // pregunta 4.2  literal A terrestre
        if($aux->terrestre != true || $aux->coordenada_inicio != null || $aux->coordenada_fin != null || $aux->distancia != null || $aux->tipo_material != null ){
        // if($aux->terrestre != false || $aux->coordenada_inicio != null ){
            dump('valor 1.5');
        }
        // https://bitacoradelperlanegra.wordpress.com/2021/02/09/arrays-asociativos/
        
        // array_map para comprar los arreglos
        // https://www.php.net/manual/es/function.array-map.php

        // ver si un elemento pertenece a un arreglo
        // https://www.php.net/manual/es/function.in-array.php



        // pregunta 4.2  literal B Acuatico
        // dump(array_key_exists('acuatico',$aux)? "si existe": "no existe");
        // $aux->acuatico != true || 
        if($aux->subtipo_acuatico != null || $aux->puerto_muelle_partida != null || $aux->puerto_muelle_llegada != null || $aux->estado_puerto_llegada != null || $aux->observaciones_acuatico != null ){
            // if($aux->terrestre != false || $aux->coordenada_inicio != null ){
                dump('valor b: 1.5');
        }
        // pregunta 4.2  literal B Acuatico
        if($aux->observaciones_aereo != null || $aux->nacional){
            dump('valor c: 1.5');
        }
        // pregunta 4.3
        if($aux->bus || $aux->buseta || $aux->transporte_4x4 || $aux->taxi || $aux->mototaxi || $aux->teleferico || $aux->barco || $aux->lancha){
            dump('valor 4.3: 1.5');
        }
        $transportes = ['bus', 'buseta', 'tranporte_4x4', 'taxi', 'mototaxi', 'teleferico', 'barco', 'lancha'];
        dump($transportes);
        return view('gad.ponderacion')->with('rec',$recuperado4);
    }



    // nombre de los inputs hardcodeados
    // comparar si existen en los datos recuperados, es decir filtrar las llaves que si exiten
    // si esas llaves son mayor se agrega la calificacion.
    // var x = document.querySelector('.transportes').getElementsByTagName('input');
    // var arr = [... x];
    // arr.map( _ => _.name);


    // logica es evaluar cada pregunta y recuperar puntuacion acumular puntaje
    // guardarlo en BD
    // Mostroarlo en un DataTable
    
}
